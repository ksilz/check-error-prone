import java.text.DecimalFormat
import java.text.SimpleDateFormat

plugins {
    id 'org.springframework.boot' version '2.1.12.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'

    // additions
    id 'net.ltgt.errorprone' version "1.1.1"
}

group = 'com.betterprojectsfaster.test.errorprone'
version = '1.0'

sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // additions
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    errorprone 'com.google.errorprone:error_prone_core:2.3.4'

}

// additions from here on out
targetCompatibility = '11'
assert System.properties["java.specification.version"] == "11"

defaultTasks "bootRun"

springBoot {
    mainClassName = "com.betterprojectsfaster.test.errorprone.lombokErrorProne.LombokErrorProneApplication"
}

// addition

ext {
    startOfBuild = System.currentTimeMillis()
    durationFormatter = new DecimalFormat("###,##0.0")
    startOfTask = 0l
    endOfTask = 0l
}

gradle.taskGraph.beforeTask {
    Task task ->
        startOfTask = System.currentTimeMillis()
}

class BA extends BuildAdapter {
    final SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss", Locale.US)

    void buildFinished(BuildResult result) {
        final String message = formatter.format(new Date())
        println " "
        println " **************************"
        println " *  Finished at " + message + "  *"
        println " **************************"
    }
}

gradle.addListener(new BA())

gradle.taskGraph.afterTask {
    Task task ->
        final float duration = (System.currentTimeMillis() - startOfTask) / 1024
        final message = durationFormatter.format(duration)
        println "  > " + message + "s"
}

compileJava.doFirst {
    println '  Java vendor:  ' + System.properties['java.vendor']
    println '  JVM vendor:   ' + System.properties['java.vm.vendor']
    println '  JVM name:     ' + System.properties['java.vm.name']
    println '  Java version: ' + System.properties['java.version']
    println '  JVM version:  ' + System.properties['java.vm.version']
    println()
}

tasks.withType(JavaCompile) {
    options.errorprone.disable("AndroidJdkLibsChecker", "Java7ApiChecker")
    options.errorprone {
        disableWarningsInGeneratedCode = true
        allDisabledChecksAsWarnings = true

        /*
            COMMENT OUT THIS LINE AND UN-COMMENT ONE OF THE "excludedPaths"
            LINES BELOW TO REPRODUCE ERRORS
        */
        //excludedPaths = ".*/issues/.*"

        /*
            https://github.com/google/error-prone/issues/1479
                MultiVariableDeclaration: IllegalArgumentException
                "Start [449] should not be after end [-1]" (Preconditions.java:300) in Lombok class
        */
        //excludedPaths = ".*/issues/(almostjavadoc|unnecessarydefaultinenumswitch)/.*"

        /*
            https://github.com/google/error-prone/issues/1430
                IllegalArgumentException from AlmostJavadoc pattern on project using lombok
        */
        //excludedPaths = ".*/issues/(multivariabledeclaration|unnecessarydefaultinenumswitch|missingoverride)/.*"

        /*
            https://github.com/google/error-prone/issues/14

        */
        excludedPaths = ".*/issues/(multivariabledeclaration|unnecessarydefaultinenumswitch|almostjavadoc)/.*"

        /*
            DOESN'T REPRODUCE THE ERROR - IGNORE FOR NOW!

            https://github.com/google/error-prone/issues/1478
                UnnecessaryDefaultInEnumSwitch: NPE in SuggestedFixes.compilesWithFix
                (SuggestedFixes.java:1019)
        */
        //  excludedPaths = ".*/ issues / almostjavadoc /.* "

    }
}


